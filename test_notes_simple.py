#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

import os
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("GROQ_API_KEY")

def test_groq_transcription_direct(audio_file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ Groq API"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é Groq...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
    
    headers = {
        "Authorization": f"Bearer {API_KEY}"
    }
    
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json",  # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            "prompt": "Transcribe this audio content."  # –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
        }
        
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        return {
            "success": True,
            "transcript": transcript,
            "processing_time": processing_time,
            "method": "direct_groq"
        }
    else:
        return {
            "success": False,
            "error": f"API Error: {response.status_code} - {response.text}",
            "processing_time": processing_time,
            "method": "direct_groq"
        }

def test_groq_speed_comparison(audio_file_path):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ Groq"""
    print(f"‚ö° –¢–µ—Å—Ç–∏—Ä—É—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ Groq...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
    headers = {"Authorization": f"Bearer {API_KEY}"}
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± (verbose_json)
    print("üîÑ –¢–µ—Å—Ç 1: –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± (verbose_json)...")
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "verbose_json",
            "timestamp_granularities": ["word"]
        }
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    slow_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        results.append({
            "method": "slow_verbose_json",
            "processing_time": slow_time,
            "transcript_length": len(transcript),
            "success": True
        })
        print(f"‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: {slow_time:.2f}—Å")
    else:
        print(f"‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: {response.status_code}")
    
    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± (json)
    print("‚ö° –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± (json)...")
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json",
            "prompt": "Transcribe this audio content."
        }
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    fast_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        results.append({
            "method": "fast_json",
            "processing_time": fast_time,
            "transcript_length": len(transcript),
            "success": True
        })
        print(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±: {fast_time:.2f}—Å")
    else:
        print(f"‚ùå –ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±: {response.status_code}")
    
    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –¢–µ—Å—Ç 3: –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    print("üöÄ –¢–µ—Å—Ç 3: –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±...")
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json"
        }
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    ultra_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        results.append({
            "method": "ultra_fast",
            "processing_time": ultra_time,
            "transcript_length": len(transcript),
            "success": True
        })
        print(f"‚úÖ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±: {ultra_time:.2f}—Å")
    else:
        print(f"‚ùå –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±: {response.status_code}")
    
    return results

def find_audio_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    audio_files = []
    
    # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ uploads
    uploads_dir = "uploads"
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    for file in os.listdir('.'):
        if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
            audio_files.append(file)
    
    return audio_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ Groq")
    print("=" * 50)
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ .mp3, .wav, .webm –∏–ª–∏ .m4a —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É uploads/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size = os.path.getsize(file_path) / (1024 * 1024)
        print(f"  {i}. {os.path.basename(file_path)} ({size:.2f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ 1: –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è Groq")
    print("=" * 50)
    
    result1 = test_groq_transcription_direct(selected_file)
    
    if result1 and result1["success"]:
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result1['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(result1['transcript'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = result1['transcript']
        if len(transcript) > 200:
            print(f"üìÑ –¢–µ–∫—Å—Ç: {transcript[:200]}...")
        else:
            print(f"üìÑ –¢–µ–∫—Å—Ç: {transcript}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        if result1:
            print(f"–û—à–∏–±–∫–∞: {result1.get('error', 'Unknown error')}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤")
    print("=" * 50)
    
    results2 = test_groq_speed_comparison(selected_file)
    
    if results2:
        successful_results = [r for r in results2 if r["success"]]
        
        if successful_results:
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:")
            print("-" * 30)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            successful_results.sort(key=lambda x: x["processing_time"])
            
            for i, result in enumerate(successful_results, 1):
                method_name = {
                    "slow_verbose_json": "–ú–µ–¥–ª–µ–Ω–Ω—ã–π (verbose_json)",
                    "fast_json": "–ë—ã—Å—Ç—Ä—ã–π (json + prompt)",
                    "ultra_fast": "–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π (json)"
                }.get(result["method"], result["method"])
                
                print(f"{i}. {method_name}")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   üìù –î–ª–∏–Ω–∞: {result['transcript_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            if len(successful_results) >= 2:
                fastest = successful_results[0]
                slowest = successful_results[-1]
                improvement = (slowest["processing_time"] - fastest["processing_time"]) / slowest["processing_time"] * 100
                
                print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
                print(f"   –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest['processing_time']:.2f}—Å ({fastest['method']})")
                print(f"   –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π: {slowest['processing_time']:.2f}—Å ({slowest['method']})")
                print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
                
                if improvement > 20:
                    print("   üöÄ –û—Ç–ª–∏—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
                elif improvement > 10:
                    print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                else:
                    print("   ‚ö†Ô∏è  –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
        else:
            print("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"groq_simple_test_{timestamp}.json"
    
    test_data = {
        "timestamp": timestamp,
        "selected_file": selected_file,
        "results": {
            "direct_transcription": result1,
            "speed_comparison": results2
        }
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 50)

if __name__ == "__main__":
    main() 