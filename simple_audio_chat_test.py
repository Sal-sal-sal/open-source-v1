#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è audio_chat —Å Groq Whisper.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤.
"""

import os
import requests
import json
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
API_BASE_URL = "http://localhost:8000"  # URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞

def test_groq_transcription_file(audio_file_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Groq API
    
    Args:
        audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Returns:
        str: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return None
    
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª {audio_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {audio_file_path} –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ Groq...")
    
    GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    try:
        with open(audio_file_path, "rb") as audio_file:
            files = {
                "file": audio_file
            }
            data = {
                "model": "whisper-large-v3-turbo",
                "response_format": "json"
            }
            
            response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
            
        if response.status_code == 200:
            result = response.json()
            transcript = result.get("text", "")
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return transcript
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def test_local_api_transcription(audio_file_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Groq
    
    Args:
        audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Returns:
        str: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª {audio_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {audio_file_path} –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API (Groq)...")
    
    try:
        with open(audio_file_path, "rb") as audio_file:
            files = {
                "file": audio_file
            }
            data = {
                "service": "groq"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Groq
            }
            
            response = requests.post(f"{API_BASE_URL}/api/audio/transcript/", files=files, data=data)
            
        if response.status_code == 200:
            result = response.json()
            transcript = result.get("transcript", "")
            service_used = result.get("service_used", "unknown")
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: {service_used}")
            return transcript
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def get_available_services():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/audio/transcription-services")
        
        if response.status_code == 200:
            services = response.json()
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
            for service_name, service_info in services.items():
                if service_name != "preferred":
                    status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if service_info["available"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    print(f"  {service_name}: {status} ({service_info['name']})")
            return services
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
        return None

def find_audio_files():
    """–ò—â–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads"""
    uploads_dir = Path("uploads")
    audio_extensions = [".mp3", ".wav", ".webm", ".m4a", ".ogg"]
    
    audio_files = []
    
    if uploads_dir.exists():
        for ext in audio_extensions:
            audio_files.extend(uploads_dir.glob(f"*{ext}"))
    
    return audio_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ Audio Chat - Groq Whisper Integration Test")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Groq API
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.groq.com/")
        print("2. –î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
    print("\n" + "=" * 60)
    services = get_available_services()
    
    if not services:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    
    # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    print("\n" + "=" * 60)
    print("üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...")
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads/")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads/ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file in enumerate(audio_files, 1):
        print(f"  {i}. {file.name}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 60)
    while True:
        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file.name}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ß–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API —Å Groq
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API (Groq):")
    transcript_local = test_local_api_transcription(str(selected_file))
    
    if transcript_local:
        print("\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢ (–õ–æ–∫–∞–ª—å–Ω—ã–π API):")
        print("-" * 40)
        print(transcript_local)
        print("-" * 40)
    
    # –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ —á–µ—Ä–µ–∑ Groq API
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Groq API:")
    transcript_direct = test_groq_transcription_file(str(selected_file))
    
    if transcript_direct:
        print("\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢ (–ü—Ä—è–º–æ–π Groq API):")
        print("-" * 40)
        print(transcript_direct)
        print("-" * 40)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if transcript_local and transcript_direct:
        print("\n" + "=" * 60)
        print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        if transcript_local.strip() == transcript_direct.strip():
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è:")
            print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π API: {transcript_local}")
            print(f"–ü—Ä—è–º–æ–π Groq:  {transcript_direct}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if transcript_local or transcript_direct:
        print("\n" + "=" * 60)
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        results = {
            "audio_file": str(selected_file),
            "file_size": os.path.getsize(selected_file),
            "local_api_transcript": transcript_local,
            "direct_groq_transcript": transcript_direct,
            "services_available": services
        }
        
        output_file = f"transcription_test_results_{selected_file.stem}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")

if __name__ == "__main__":
    main() 