#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ endpoints –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.
"""

import os
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("GROQ_API_KEY")

def test_create_note_from_voice_message(audio_file_path, note_title, note_content="", tags=""):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {note_title}")
    
    url = f"{API_BASE_URL}/api/notes/create-from-voice-message/"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    with open(audio_file_path, 'rb') as audio_file:
        files = {
            'voice_file': (os.path.basename(audio_file_path), audio_file, 'audio/mpeg')
        }
        
        data = {
            'note_title': note_title,
            'note_content': note_content,
            'tags': tags
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(url, files=files, data=data)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üéØ –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result.get('transcription', {}).get('processing_time', 0):.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏: {result.get('note_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üîó GCS URL: {result.get('transcription', {}).get('gcs_url', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
            note_content = result.get('note', {}).get('content', '')
            if note_content:
                print("\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –ó–ê–ú–ï–¢–ö–ò:")
                print("-" * 50)
                print(note_content[:500] + "..." if len(note_content) > 500 else note_content)
                print("-" * 50)
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None

def test_create_note_from_voice_and_transcript(audio_file_path, transcript_file_id, note_title, note_content="", tags=""):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
    print(f"üìÅ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"üìö ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_file_id}")
    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {note_title}")
    
    url = f"{API_BASE_URL}/api/notes/create-from-voice-and-transcript/"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    with open(audio_file_path, 'rb') as audio_file:
        files = {
            'voice_file': (os.path.basename(audio_file_path), audio_file, 'audio/mpeg')
        }
        
        data = {
            'transcript_file_id': transcript_file_id,
            'note_title': note_title,
            'note_content': note_content,
            'tags': tags
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(url, files=files, data=data)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üéØ –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {result.get('transcription', {}).get('voice_processing_time', 0):.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏: {result.get('note_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìö –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result.get('transcription', {}).get('transcript_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üé§ –î–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('transcription', {}).get('voice_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
            note_content = result.get('note', {}).get('content', '')
            if note_content:
                print("\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –ó–ê–ú–ï–¢–ö–ò:")
                print("-" * 50)
                print(note_content[:500] + "..." if len(note_content) > 500 else note_content)
                print("-" * 50)
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None

def test_list_transcripts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üìö –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
    
    url = f"{API_BASE_URL}/api/notes/transcripts/"
    
    response = requests.get(url)
    
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—É—á–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(result.get('transcripts', []))}")
        
        for i, transcript in enumerate(result.get('transcripts', []), 1):
            print(f"  {i}. {transcript.get('original_filename', 'Unknown')}")
            print(f"     ID: {transcript.get('file_id', 'N/A')}")
            print(f"     –†–∞–∑–º–µ—Ä: {transcript.get('transcript_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"     –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcript.get('total_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
            print()
        
        return result
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None

def find_audio_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    audio_files = []
    
    # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ uploads
    uploads_dir = "uploads"
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    for file in os.listdir('.'):
        if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
            audio_files.append(file)
    
    return audio_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 60)
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{API_BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ .mp3, .wav, .webm –∏–ª–∏ .m4a —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É uploads/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size = os.path.getsize(file_path) / (1024 * 1024)
        print(f"  {i}. {os.path.basename(file_path)} ({size:.2f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 60)
    
    note_title = f"–ó–∞–º–µ—Ç–∫–∞ –∏–∑ {os.path.basename(selected_file)}"
    note_content = "–≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."
    tags = "–≥–æ–ª–æ—Å, –∑–∞–º–µ—Ç–∫–∞, —Ç–µ—Å—Ç"
    
    result1 = test_create_note_from_voice_message(
        selected_file, 
        note_title, 
        note_content, 
        tags
    )
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
    print("=" * 60)
    
    transcripts_result = test_list_transcripts()
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if transcripts_result and transcripts_result.get('transcripts'):
        print("\n" + "=" * 60)
        print("üèÅ –¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        print("=" * 60)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        first_transcript = transcripts_result['transcripts'][0]
        transcript_file_id = first_transcript.get('file_id')
        
        if transcript_file_id:
            note_title2 = f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ - {os.path.basename(selected_file)}"
            note_content2 = "–≠—Ç–æ –∑–∞–º–µ—Ç–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            tags2 = "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞, –≥–æ–ª–æ—Å"
            
            result3 = test_create_note_from_voice_and_transcript(
                selected_file,
                transcript_file_id,
                note_title2,
                note_content2,
                tags2
            )
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"notes_test_{timestamp}.json"
    
    test_data = {
        "timestamp": timestamp,
        "selected_file": selected_file,
        "results": {
            "voice_only": result1,
            "transcripts_list": transcripts_result
        }
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)

if __name__ == "__main__":
    main() 