#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import os
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("GROQ_API_KEY")

def test_voice_message_to_note(audio_file_path, note_title="Test Voice Note"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {note_title}")
    
    url = f"{API_BASE_URL}/api/voice-notes/create-from-voice-message/"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    with open(audio_file_path, 'rb') as audio_file:
        files = {
            'voice_file': (os.path.basename(audio_file_path), audio_file, 'audio/webm')
        }
        
        data = {
            'note_title': note_title,
            'note_content': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            'tags': '—Ç–µ—Å—Ç,–≥–æ–ª–æ—Å,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(url, files=files, data=data)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üéØ –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result.get('transcription', {}).get('processing_time', 0):.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏: {result.get('note_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üîó GCS URL: {result.get('transcription', {}).get('gcs_url', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
            note_content = result.get('note', {}).get('content', '')
            if note_content:
                print("\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –ó–ê–ú–ï–¢–ö–ò:")
                print("-" * 50)
                print(note_content[:500] + "..." if len(note_content) > 500 else note_content)
                print("-" * 50)
            
            return result
        elif response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401 Unauthorized)")
            print("üí° –ù—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None
        elif response.status_code == 400:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400 Bad Request)")
            try:
                error_detail = response.json()
                print(f"üìã –î–µ—Ç–∞–ª–∏: {error_detail}")
            except:
                print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return None
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return None

def test_combined_note_creation(audio_file_path, transcript_file_id, note_title="Test Combined Note"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"üìÑ Transcript ID: {transcript_file_id}")
    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {note_title}")
    
    url = f"{API_BASE_URL}/api/voice-notes/create-from-voice-and-transcript/"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    with open(audio_file_path, 'rb') as audio_file:
        files = {
            'voice_file': (os.path.basename(audio_file_path), audio_file, 'audio/webm')
        }
        
        data = {
            'transcript_file_id': transcript_file_id,
            'note_title': note_title,
            'note_content': '–≠—Ç–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            'tags': '—Ç–µ—Å—Ç,–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è,–∞—É–¥–∏–æ–∫–Ω–∏–≥–∞,–≥–æ–ª–æ—Å'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(url, files=files, data=data)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üéØ –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {result.get('transcription', {}).get('voice_processing_time', 0):.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏: {result.get('note_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìö –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result.get('transcription', {}).get('transcript_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üé§ –î–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('transcription', {}).get('voice_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
            note_content = result.get('note', {}).get('content', '')
            if note_content:
                print("\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–û–ô –ó–ê–ú–ï–¢–ö–ò:")
                print("-" * 50)
                print(note_content[:500] + "..." if len(note_content) > 500 else note_content)
                print("-" * 50)
            
            return result
        elif response.status_code == 404:
            print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404 Not Found)")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ transcript_file_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        elif response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401 Unauthorized)")
            return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return None

def find_audio_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    audio_files = []
    
    # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ uploads
    uploads_dir = "uploads"
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    for file in os.listdir('.'):
        if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
            audio_files.append(file)
    
    return audio_files

def find_transcript_files():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫"""
    # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ GCS –∏–ª–∏ –ë–î
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
    return ["test-transcript-id-123"]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 60)
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{API_BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ .mp3, .wav, .webm –∏–ª–∏ .m4a —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É uploads/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size = os.path.getsize(file_path) / (1024 * 1024)
        print(f"  {i}. {os.path.basename(file_path)} ({size:.2f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_token = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
    
    if not auth_token:
        print("‚ùå –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    headers = {"Authorization": f"Bearer {auth_token}"}
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 60)
    
    note_title = f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ {int(time.time())}"
    result1 = test_voice_message_to_note(selected_file, note_title)
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏")
    print("=" * 60)
    
    transcript_files = find_transcript_files()
    if transcript_files:
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript_id = transcript_files[0]
        combined_title = f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ {int(time.time())}"
        result2 = test_combined_note_creation(selected_file, transcript_id, combined_title)
    else:
        print("‚ö†Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç")
        result2 = None
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    if result1:
        print("‚úÖ –¢–µ—Å—Ç 1 (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): –£–°–ü–ï–®–ï–ù")
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {result1.get('note', {}).get('title', 'Unknown')}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result1.get('transcription', {}).get('processing_time', 0):.2f} —Å–µ–∫")
    else:
        print("‚ùå –¢–µ—Å—Ç 1 (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): –ü–†–û–í–ê–õ–ï–ù")
    
    if result2:
        print("‚úÖ –¢–µ—Å—Ç 2 (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è): –£–°–ü–ï–®–ï–ù")
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞: {result2.get('note', {}).get('title', 'Unknown')}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result2.get('transcription', {}).get('voice_processing_time', 0):.2f} —Å–µ–∫")
    else:
        print("‚ùå –¢–µ—Å—Ç 2 (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è): –ü–†–û–í–ê–õ–ï–ù –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"voice_notes_test_{timestamp}.json"
    
    test_data = {
        "timestamp": timestamp,
        "selected_file": selected_file,
        "auth_token_provided": bool(auth_token),
        "results": {
            "voice_message_note": result1,
            "combined_note": result2
        }
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)
    
    if result1 or result2:
        print("\nüéâ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    else:
        print("\n‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    main() 