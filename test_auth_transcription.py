#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É endpoint /api/audio/transcript/ —Å —Ç–æ–∫–µ–Ω–æ–º.
"""

import os
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
API_KEY = os.getenv("GROQ_API_KEY")

def test_auth_transcription(audio_file_path, auth_token=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    
    url = f"{API_BASE_URL}/api/audio/transcript/"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {}
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    else:
        print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    with open(audio_file_path, 'rb') as audio_file:
        files = {
            'file': (os.path.basename(audio_file_path), audio_file, 'audio/webm')
        }
        
        data = {
            'service': 'groq'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Groq
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(url, files=files, data=data, headers=headers)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üìù –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {len(result.get('transcript', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {result.get('service_used', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcript = result.get('transcript', '')
            if transcript:
                print(f"üìÑ –¢–µ–∫—Å—Ç: {transcript[:200]}..." if len(transcript) > 200 else f"üìÑ –¢–µ–∫—Å—Ç: {transcript}")
            
            return result
        elif response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401 Unauthorized)")
            print("üí° –ù—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None
        elif response.status_code == 400:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400 Bad Request)")
            try:
                error_detail = response.json()
                print(f"üìã –î–µ—Ç–∞–ª–∏: {error_detail}")
            except:
                print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return None
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return None

def test_without_auth(audio_file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ 1: –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    return test_auth_transcription(audio_file_path, auth_token=None)

def test_with_auth(audio_file_path, auth_token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ 2: –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    print("=" * 50)
    
    return test_auth_transcription(audio_file_path, auth_token=auth_token)

def find_audio_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    audio_files = []
    
    # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ uploads
    uploads_dir = "uploads"
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    for file in os.listdir('.'):
        if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
            audio_files.append(file)
    
    return audio_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    print("=" * 50)
    
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{API_BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ .mp3, .wav, .webm –∏–ª–∏ .m4a —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É uploads/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size = os.path.getsize(file_path) / (1024 * 1024)
        print(f"  {i}. {os.path.basename(file_path)} ({size:.2f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_token = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    result1 = test_without_auth(selected_file)
    
    # –¢–µ—Å—Ç 2: –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω)
    result2 = None
    if auth_token:
        result2 = test_with_auth(selected_file, auth_token)
    else:
        print("\n" + "=" * 50)
        print("üèÅ –¢–ï–°–¢ 2: –ü—Ä–æ–ø—É—â–µ–Ω (—Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)")
        print("=" * 50)
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    if result1:
        print("‚úÖ –¢–µ—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –£–°–ü–ï–®–ï–ù")
        print("‚ö†Ô∏è  –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ endpoint –Ω–µ –∑–∞—â–∏—â–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    else:
        print("‚ùå –¢–µ—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ü–†–û–í–ê–õ–ï–ù")
        print("‚úÖ –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ endpoint –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω")
    
    if result2:
        print("‚úÖ –¢–µ—Å—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: –£–°–ü–ï–®–ï–ù")
        print("üéØ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    elif auth_token:
        print("‚ùå –¢–µ—Å—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: –ü–†–û–í–ê–õ–ï–ù")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"auth_transcription_test_{timestamp}.json"
    
    test_data = {
        "timestamp": timestamp,
        "selected_file": selected_file,
        "auth_token_provided": bool(auth_token),
        "results": {
            "without_auth": result1,
            "with_auth": result2
        }
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 50)

if __name__ == "__main__":
    main() 