#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ Groq.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π.
"""

import os
import time
import requests
import tempfile
from dotenv import load_dotenv
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

def test_groq_speed_old_way(audio_file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–º–µ–¥–ª–µ–Ω–Ω—ã–π)"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–º–µ–¥–ª–µ–Ω–Ω—ã–π)...")
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "verbose_json",  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            "timestamp_granularities": ["word"]  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        }
        
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        return {
            "success": True,
            "transcript": transcript,
            "processing_time": processing_time,
            "method": "old_slow"
        }
    else:
        return {
            "success": False,
            "error": f"API Error: {response.status_code} - {response.text}",
            "processing_time": processing_time,
            "method": "old_slow"
        }

def test_groq_speed_new_way(audio_file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä—ã–π)"""
    print("‚ö° –¢–µ—Å—Ç–∏—Ä—É—é –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–±—ã—Å—Ç—Ä—ã–π)...")
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json",  # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            "prompt": "Transcribe this audio content."  # –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
        }
        
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        return {
            "success": True,
            "transcript": transcript,
            "processing_time": processing_time,
            "method": "new_fast"
        }
    else:
        return {
            "success": False,
            "error": f"API Error: {response.status_code} - {response.text}",
            "processing_time": processing_time,
            "method": "new_fast"
        }

def test_groq_speed_ultra_fast(audio_file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É—é —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±...")
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    start_time = time.time()
    
    with open(audio_file_path, "rb") as audio_file:
        files = {"file": audio_file}
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json",
            "prompt": "Audio transcription."
        }
        
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    if response.status_code == 200:
        result = response.json()
        transcript = result.get("text", "")
        return {
            "success": True,
            "transcript": transcript,
            "processing_time": processing_time,
            "method": "ultra_fast"
        }
    else:
        return {
            "success": False,
            "error": f"API Error: {response.status_code} - {response.text}",
            "processing_time": processing_time,
            "method": "ultra_fast"
        }

def find_audio_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    audio_files = []
    
    # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ uploads
    uploads_dir = "uploads"
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    for file in os.listdir('.'):
        if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a')):
            audio_files.append(file)
    
    return audio_files

def get_file_info(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    try:
        size = os.path.getsize(file_path)
        size_mb = size / (1024 * 1024)
        return {
            "path": file_path,
            "size_mb": round(size_mb, 2),
            "filename": os.path.basename(file_path)
        }
    except Exception as e:
        return {"path": file_path, "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ Groq")
    print("=" * 50)
    
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ .mp3, .wav, .webm –∏–ª–∏ .m4a —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É uploads/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        info = get_file_info(file_path)
        print(f"  {i}. {info['filename']} ({info.get('size_mb', 'N/A')} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
            file_index = int(choice) - 1
            if 0 <= file_index < len(audio_files):
                selected_file = audio_files[file_index]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    file_info = get_file_info(selected_file)
    print(f"\nüéµ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_info['filename']} ({file_info.get('size_mb', 'N/A')} MB)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq API...")
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
    try:
        response = requests.get("https://api.groq.com/openai/v1/models", headers=headers)
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq API —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\n" + "=" * 50)
    print("üèÅ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–û–†–û–°–¢–ò")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
    result1 = test_groq_speed_old_way(selected_file)
    results.append(result1)
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    time.sleep(2)
    
    # –¢–µ—Å—Ç 2: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±
    result2 = test_groq_speed_new_way(selected_file)
    results.append(result2)
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    time.sleep(2)
    
    # –¢–µ—Å—Ç 3: –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±
    result3 = test_groq_speed_ultra_fast(selected_file)
    results.append(result3)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    successful_results = [r for r in results if r["success"]]
    
    if not successful_results:
        print("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        for result in results:
            print(f"  {result['method']}: {result['error']}")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    successful_results.sort(key=lambda x: x["processing_time"])
    
    print(f"üìÅ –§–∞–π–ª: {file_info['filename']}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {file_info.get('size_mb', 'N/A')} MB")
    print()
    
    for i, result in enumerate(successful_results, 1):
        method_name = {
            "old_slow": "–°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–º–µ–¥–ª–µ–Ω–Ω—ã–π)",
            "new_fast": "–ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–±—ã—Å—Ç—Ä—ã–π)",
            "ultra_fast": "–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±"
        }.get(result["method"], result["method"])
        
        print(f"{i}. {method_name}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(result['transcript'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    if len(successful_results) >= 2:
        fastest = successful_results[0]
        slowest = successful_results[-1]
        improvement = (slowest["processing_time"] - fastest["processing_time"]) / slowest["processing_time"] * 100
        
        print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest['processing_time']:.2f}—Å")
        print(f"   –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π: {slowest['processing_time']:.2f}—Å")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        
        if improvement > 20:
            print("   üöÄ –û—Ç–ª–∏—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        elif improvement > 10:
            print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("   ‚ö†Ô∏è  –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"groq_speed_test_{timestamp}.json"
    
    test_data = {
        "timestamp": timestamp,
        "file_info": file_info,
        "results": results,
        "summary": {
            "total_tests": len(results),
            "successful_tests": len(successful_results),
            "fastest_method": successful_results[0]["method"] if successful_results else None,
            "fastest_time": successful_results[0]["processing_time"] if successful_results else None
        }
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if successful_results:
        best_result = successful_results[0]
        print(f"\nüìù –ü–†–ò–ú–ï–† –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç):")
        print("-" * 30)
        transcript = best_result["transcript"]
        if len(transcript) > 200:
            print(transcript[:200] + "...")
        else:
            print(transcript)
        print("-" * 30)

if __name__ == "__main__":
    main() 