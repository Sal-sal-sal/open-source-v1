#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ audio_chat —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ Groq Whisper.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ Groq –∏ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
"""

import os
import asyncio
import tempfile
import wave
import pyaudio
import requests
from dotenv import load_dotenv
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

class AudioRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    
    def __init__(self):
        self.CHUNK = 1024
        self.FORMAT = pyaudio.paInt16
        self.CHANNELS = 1
        self.RATE = 44100
        self.p = pyaudio.PyAudio()
        
    def record_audio(self, duration=5, filename="temp_audio.wav"):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        
        Args:
            duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            str: –ø—É—Ç—å –∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        print(f"üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        print("–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
        
        stream = self.p.open(
            format=self.FORMAT,
            channels=self.CHANNELS,
            rate=self.RATE,
            input=True,
            frames_per_buffer=self.CHUNK
        )
        
        frames = []
        
        for i in range(0, int(self.RATE / self.CHUNK * duration)):
            data = stream.read(self.CHUNK)
            frames.append(data)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏
            progress = (i + 1) / int(self.RATE / self.CHUNK * duration) * 100
            print(f"\rüìπ –ó–∞–ø–∏—Å—å: {progress:.1f}%", end="", flush=True)
        
        print("\n‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        stream.stop_stream()
        stream.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(self.CHANNELS)
            wf.setsampwidth(self.p.get_sample_size(self.FORMAT))
            wf.setframerate(self.RATE)
            wf.writeframes(b''.join(frames))
        
        return filename
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        self.p.terminate()

def transcribe_with_groq(audio_file_path):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Groq API
    
    Args:
        audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        
    Returns:
        str: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return None
    
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ Groq...")
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    try:
        with open(audio_file_path, "rb") as audio_file:
            files = {
                "file": audio_file
            }
            data = {
                "model": "whisper-large-v3-turbo",
                "response_format": "json"
            }
            
            response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)
            
        if response.status_code == 200:
            result = response.json()
            transcript = result.get("text", "")
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return transcript
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def simulate_audio_chat_workflow():
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π workflow audio_chat:
    1. –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Groq Whisper
    3. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    """
    print("üéµ Audio Chat - Groq Whisper Integration")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Groq API
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.groq.com/")
        print("2. –î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
    temp_audio_file = "temp_audio_message.wav"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        recorder = AudioRecorder()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        while True:
            try:
                duration = input("\n‚è±Ô∏è  –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
                if not duration:
                    duration = 5
                else:
                    duration = int(duration)
                if duration > 0:
                    break
                else:
                    print("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_file = recorder.record_audio(duration, temp_audio_file)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Groq
        transcript = transcribe_with_groq(audio_file)
        
        if transcript:
            print("\n" + "=" * 50)
            print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:")
            print("=" * 50)
            print(transcript)
            print("=" * 50)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            timestamp = asyncio.get_event_loop().time()
            history_file = f"audio_chat_history_{int(timestamp)}.json"
            
            history_data = {
                "timestamp": timestamp,
                "audio_file": audio_file,
                "duration_seconds": duration,
                "transcript": transcript,
                "service": "groq",
                "model": "whisper-large-v3-turbo"
            }
            
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {history_file}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        recorder.cleanup()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ó–∞–ø–∏—Å—å –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if os.path.exists(temp_audio_file):
            os.remove(temp_audio_file)
            print(f"üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_audio_file} —É–¥–∞–ª–µ–Ω")

def test_groq_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Groq API...")
    
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}"
    }
    
    try:
        response = requests.get("https://api.groq.com/openai/v1/models", headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq API —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            return False
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ Audio Chat - Groq Whisper Integration")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_groq_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Groq API")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return
    
    print("\nüöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    try:
        while True:
            simulate_audio_chat_workflow()
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            choice = input("\nüîÑ –ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? (y/n): ").strip().lower()
            if choice not in ['y', 'yes', '–¥–∞', '–¥']:
                break
                
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main() 