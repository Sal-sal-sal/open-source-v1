"""Add study time and streak to user

Revision ID: 2584b3be5775
Revises: e1413572c134
Create Date: 2025-07-22 10:07:07.069060

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2584b3be5775'
down_revision: Union[str, None] = 'e1413572c134'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_userinfo_username'), table_name='userinfo')
    op.drop_table('userinfo')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_dailystudy_user_id'), table_name='dailystudy')
    op.drop_table('dailystudy')
    op.drop_table('videos')
    op.drop_index(op.f('ix_loginevent_user_id'), table_name='loginevent')
    op.drop_table('loginevent')
    op.add_column('users', sa.Column('total_study_time', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('users', sa.Column('study_streak_days', sa.Integer(), nullable=False, server_default='0'))
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'current_streak')
    op.drop_column('users', 'total_study_minutes')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('total_study_minutes', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('current_streak', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('users', 'study_streak_days', server_default='0')
    op.drop_column('users', 'total_study_time', server_default='0')
    op.create_table('loginevent',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('login_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('loginevent_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('loginevent_pkey'))
    )
    op.create_index(op.f('ix_loginevent_user_id'), 'loginevent', ['user_id'], unique=False)
    op.create_table('videos',
    sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name=op.f('videos_pkey'))
    )
    op.create_table('dailystudy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('minutes_studied', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('dailystudy_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('dailystudy_pkey'))
    )
    op.create_index(op.f('ix_dailystudy_user_id'), 'dailystudy', ['user_id'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('total_study_time', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('study_streak_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_study_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    sa.UniqueConstraint('email', name=op.f('user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('userinfo',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('total_study_time', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('study_streak_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_study_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('userinfo_pkey')),
    sa.UniqueConstraint('email', name=op.f('userinfo_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_userinfo_username'), 'userinfo', ['username'], unique=True)
    # ### end Alembic commands ###
