#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥ —Å Distil-Whisper.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞–Ω–∫–∏.
"""

import os
import requests
import json
import time
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

def test_audiobook_transcription(audio_file_path, chunk_size=30, overlap=2):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ API
    
    Args:
        audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        chunk_size: —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        overlap: –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
    """
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª {audio_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return None
    
    print(f"üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"‚öôÔ∏è  –ß–∞–Ω–∫: {chunk_size}—Å, –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap}—Å")
    print("=" * 60)
    
    try:
        with open(audio_file_path, 'rb') as audio_file:
            files = {'file': audio_file}
            data = {
                'chunk_size': chunk_size,
                'overlap': overlap,
                'language': 'auto',
                'task': 'transcribe',
                'service': 'groq'
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            start_time = time.time()
            
            response = requests.post(
                f"{API_BASE_URL}/api/audio/transcribe-audiobook/",
                files=files,
                data=data
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {result.get('total_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {result.get('chunk_count', 0)}")
            print(f"üåê –°–µ—Ä–≤–∏—Å: {result.get('service_used', 'unknown')}")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcript = result.get('transcript', '')
            print(f"\nüìù –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 50)
            print(transcript[:500] + ("..." if len(transcript) > 500 else ""))
            print("-" * 50)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = f"audiobook_transcript_{Path(audio_file_path).stem}.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            text_file = f"audiobook_text_{Path(audio_file_path).stem}.txt"
            with open(text_file, 'w', encoding='utf-8') as f:
                f.write(transcript)
            
            print(f"üìÑ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {text_file}")
            
            return result
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def find_audio_files():
    """–ò—â–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    search_dirs = ["uploads", ".", "audio", "audiobooks"]
    audio_extensions = [".mp3", ".wav", ".webm", ".m4a", ".ogg"]
    
    audio_files = []
    
    for search_dir in search_dirs:
        if os.path.exists(search_dir):
            for file in os.listdir(search_dir):
                file_path = os.path.join(search_dir, file)
                if os.path.isfile(file_path):
                    if any(file.lower().endswith(ext) for ext in audio_extensions):
                        audio_files.append(file_path)
    
    return audio_files

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë"""
    size_bytes = os.path.getsize(file_path)
    return size_bytes / (1024 * 1024)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥ —Å Distil-Whisper")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.groq.com/")
        print("2. –î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    print("\nüîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...")
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ –æ–¥–Ω—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: uploads/, audio/, audiobooks/")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size_mb = get_file_size_mb(file_path)
        print(f"  {i}. {os.path.basename(file_path)} ({size_mb:.1f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
    if len(audio_files) == 1:
        selected_file = audio_files[0]
        print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: {os.path.basename(selected_file)}")
    else:
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
                file_index = int(choice) - 1
                if 0 <= file_index < len(audio_files):
                    selected_file = audio_files[file_index]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
    
    # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    while True:
        try:
            chunk_input = input("–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
            chunk_size = int(chunk_input) if chunk_input else 30
            if 10 <= chunk_size <= 300:
                break
            else:
                print("‚ùå –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
    while True:
        try:
            overlap_input = input("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip()
            overlap = int(overlap_input) if overlap_input else 2
            if 0 <= overlap < chunk_size:
                break
            else:
                print(f"‚ùå –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ {chunk_size-1}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(selected_file)}")
    print(f"‚öôÔ∏è  –ß–∞–Ω–∫: {chunk_size}—Å, –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap}—Å")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    result = test_audiobook_transcription(selected_file, chunk_size, overlap)
    
    if result:
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        transcript_length = len(result.get('transcript', ''))
        word_count = len(result.get('transcript', '').split())
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_length:,}")
        print(f"  ‚Ä¢ –°–ª–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {word_count:,}")
        print(f"  ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {result.get('total_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {result.get('chunk_count', 0)}")
        
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–û–ô")

if __name__ == "__main__":
    main() 