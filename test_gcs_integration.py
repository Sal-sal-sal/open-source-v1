#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Cloud Storage.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS.
"""

import os
import requests
import json
import time
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_BASE_URL = "http://localhost:8000"
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GCS_BUCKET_NAME = os.getenv("GCS_BUCKET_NAME")

def test_audio_upload_with_transcription(audio_file_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ GCS
    """
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª {audio_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    if not GCS_BUCKET_NAME:
        print("‚ùå GCS_BUCKET_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    print(f"üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ GCS")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print(f"üåê GCS Bucket: {GCS_BUCKET_NAME}")
    print("=" * 60)
    
    try:
        with open(audio_file_path, 'rb') as audio_file:
            files = {'file': audio_file}
            data = {
                'auto_transcribe': 'true'
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            start_time = time.time()
            
            response = requests.post(
                f"{API_BASE_URL}/api/audio/load",
                files=files,
                data=data
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÑ File ID: {result.get('file_id')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if 'transcription' in result:
                transcription_info = result['transcription']
                if transcription_info.get('status') == 'completed':
                    print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ GCS")
                    print(f"üîó GCS URL: {transcription_info.get('gcs_url')}")
                    print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcription_info.get('total_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
                    print(f"üî¢ –ß–∞–Ω–∫–æ–≤: {transcription_info.get('chunk_count', 0)}")
                    print(f"üåê –°–µ—Ä–≤–∏—Å: {transcription_info.get('service_used', 'unknown')}")
                    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {transcription_info.get('model', 'unknown')}")
                    print(f"üìù –°–∏–º–≤–æ–ª–æ–≤: {transcription_info.get('transcript_length', 0):,}")
                    
                    return result
                else:
                    print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {transcription_info.get('error', 'Unknown error')}")
                    return None
            else:
                print("‚ö†Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                return result
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def test_voice_message_with_gcs(audio_file_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ GCS
    """
    if not os.path.exists(audio_file_path):
        print(f"‚ùå –§–∞–π–ª {audio_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å GCS")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(audio_file_path)}")
    print("=" * 60)
    
    try:
        with open(audio_file_path, 'rb') as audio_file:
            files = {'file': audio_file}
            data = {
                'save_to_gcs': 'true',
                'message_id': f"test_message_{int(time.time())}",
                'chat_id': 'test_chat'
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            start_time = time.time()
            
            response = requests.post(
                f"{API_BASE_URL}/api/audio/transcript/",
                files=files,
                data=data
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {result.get('transcript', '')[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS
            if 'gcs_storage' in result:
                gcs_info = result['gcs_storage']
                if gcs_info.get('status') == 'completed':
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ GCS")
                    print(f"üîó GCS URL: {gcs_info.get('gcs_url')}")
                    print(f"üìÑ Message ID: {gcs_info.get('message_id')}")
                    
                    return result
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GCS: {gcs_info.get('error', 'Unknown error')}")
                    return None
            else:
                print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                return result
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None

def test_create_note_from_transcript(file_id, voice_message_id=None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
    print(f"üìÑ File ID: {file_id}")
    if voice_message_id:
        print(f"üé§ Voice Message ID: {voice_message_id}")
    print("=" * 60)
    
    try:
        data = {
            'file_id': file_id,
            'note_title': f'–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ {int(time.time())}',
            'note_content': '–≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏.',
            'tags': '—Ç–µ—Å—Ç, –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è'
        }
        
        if voice_message_id:
            data['voice_message_id'] = voice_message_id
        
        print("üîÑ –°–æ–∑–¥–∞—é –∑–∞–º–µ—Ç–∫—É...")
        start_time = time.time()
        
        response = requests.post(
            f"{API_BASE_URL}/api/notes/create-from-transcript/",
            data=data
        )
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÑ Note ID: {result.get('note', {}).get('id')}")
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('note', {}).get('title')}")
            print(f"üìä –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result.get('transcript_length', 0):,} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üé§ –î–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('voice_message_length', 0):,} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}")
        return None

def test_list_transcripts():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    print(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
    print("=" * 60)
    
    try:
        print("üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
        response = requests.get(f"{API_BASE_URL}/api/notes/transcripts/")
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—É—á–µ–Ω!")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result.get('count', 0)}")
            
            transcripts = result.get('transcripts', [])
            for i, transcript in enumerate(transcripts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {i}. {transcript.get('original_filename', 'Unknown')}")
                print(f"     üìÑ File ID: {transcript.get('file_id')}")
                print(f"     üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcript.get('total_duration', 0):.1f}—Å")
                print(f"     üìù –°–∏–º–≤–æ–ª–æ–≤: {transcript.get('transcript_length', 0):,}")
            
            if len(transcripts) > 5:
                print(f"  ... –∏ –µ—â–µ {len(transcripts) - 5} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
            
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")
        return None

def find_audio_files():
    """–ò—â–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    search_dirs = ["uploads", ".", "audio", "audiobooks"]
    audio_extensions = [".mp3", ".wav", ".webm", ".m4a", ".ogg"]
    
    audio_files = []
    
    for search_dir in search_dirs:
        if os.path.exists(search_dir):
            for file in os.listdir(search_dir):
                file_path = os.path.join(search_dir, file)
                if os.path.isfile(file_path):
                    if any(file.lower().endswith(ext) for ext in audio_extensions):
                        audio_files.append(file_path)
    
    return audio_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Cloud Storage")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not GROQ_API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.groq.com/")
        print("2. –î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    if not GCS_BUCKET_NAME:
        print("‚ùå GCS_BUCKET_NAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ bucket –≤ Google Cloud Storage")
        print("2. –î–æ–±–∞–≤—å—Ç–µ GCS_BUCKET_NAME=your_bucket_name –≤ —Ñ–∞–π–ª .env")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é GCS (service account key)")
        return
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    print("\nüîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...")
    audio_files = find_audio_files()
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ –æ–¥–Ω—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: uploads/, audio/, audiobooks/")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file_path in enumerate(audio_files, 1):
        size_mb = os.path.getsize(file_path) / (1024 * 1024)
        print(f"  {i}. {os.path.basename(file_path)} ({size_mb:.1f} MB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
    if len(audio_files) == 1:
        selected_file = audio_files[0]
        print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: {os.path.basename(selected_file)}")
    else:
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(audio_files)}): ").strip()
                file_index = int(choice) - 1
                if 0 <= file_index < len(audio_files):
                    selected_file = audio_files[file_index]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    print(f"üìÅ –§–∞–π–ª: {os.path.basename(selected_file)}")
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ GCS")
    print("=" * 60)
    
    upload_result = test_audio_upload_with_transcription(selected_file)
    
    if not upload_result:
        print("‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    file_id = upload_result.get('file_id')
    
    # –¢–µ—Å—Ç 2: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GCS
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 2: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GCS")
    print("=" * 60)
    
    voice_result = test_voice_message_with_gcs(selected_file)
    
    voice_message_id = None
    if voice_result and 'gcs_storage' in voice_result:
        voice_message_id = voice_result['gcs_storage'].get('message_id')
    
    # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 3: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
    print("=" * 60)
    
    test_list_transcripts()
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    print("=" * 60)
    
    note_result = test_create_note_from_transcript(file_id, voice_message_id)
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    tests_passed = 0
    total_tests = 4
    
    if upload_result:
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π - –ü–†–û–í–ê–õ–ï–ù")
    
    if voice_result:
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç 2: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GCS - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç 2: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GCS - –ü–†–û–í–ê–õ–ï–ù")
    
    print("‚úÖ –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π - –ü–†–û–ô–î–ï–ù")
    tests_passed += 1
    
    if note_result:
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ - –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GCS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")

if __name__ == "__main__":
    main() 