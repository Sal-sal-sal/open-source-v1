#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Groq —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è audio_chat.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.
"""

import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
API_KEY = os.getenv("GROQ_API_KEY")

def transcribe_audio(file_path):
    """
    –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    """
    headers = {
        "Authorization": f"Bearer {API_KEY}"
    }
    with open(file_path, "rb") as audio_file:
        files = {
            "file": audio_file
        }
        data = {
            "model": "whisper-large-v3-turbo",
            "response_format": "json",
            "language": "en"  # –∏–ª–∏ —É–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
        }
        response = requests.post(GROQ_API_URL, headers=headers, files=files, data=data)

    if response.status_code == 200:
        return response.json()["text"]
    else:
        print("–û—à–∏–±–∫–∞:", response.status_code, response.text)
        return None

def main():
    print("üéµ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Groq —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not API_KEY:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return
    
    print("‚úÖ GROQ_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ uploads
    uploads_dir = "uploads"
    audio_files = []
    
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith(('.mp3', '.wav', '.webm', '.m4a', '.ogg')):
                audio_files.append(os.path.join(uploads_dir, file))
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads/")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads/ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file in enumerate(audio_files, 1):
        print(f"  {i}. {os.path.basename(file)}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
    if len(audio_files) == 1:
        selected_file = audio_files[0]
        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: {os.path.basename(selected_file)}")
    else:
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(audio_files)}): ").strip()
                file_index = int(choice) - 1
                if 0 <= file_index < len(audio_files):
                    selected_file = audio_files[file_index]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: whisper-large-v3-turbo")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    result = transcribe_audio(selected_file)
    
    if result:
        print("\n" + "=" * 40)
        print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:")
        print("=" * 40)
        print(result)
        print("=" * 40)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = f"transcript_{os.path.basename(selected_file)}.txt"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
    else:
        print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main() 